[{"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/index.js":"1","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/App.js":"2","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/reportWebVitals.js":"3","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/Footer/index.js":"4","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/Navbar/index.js":"5","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js":"6","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/Table/index.js":"7"},{"size":535,"mtime":1661221473223,"results":"8","hashOfConfig":"9"},{"size":1609,"mtime":1662091583516,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1661221473223,"results":"11","hashOfConfig":"9"},{"size":1477,"mtime":1662008931138,"results":"12","hashOfConfig":"9"},{"size":1933,"mtime":1662008922906,"results":"13","hashOfConfig":"9"},{"size":5216,"mtime":1662090253405,"results":"14","hashOfConfig":"9"},{"size":651,"mtime":1662095161101,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1gzgogb",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/index.js",[],[],[],"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/App.js",[],[],"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/reportWebVitals.js",[],[],"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/Footer/index.js",["40","41"],[],"import * as React from \"react\";\n\n// MUI Imports\nimport {\n  Container,\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  Link,\n} from \"@mui/material\";\n\nconst footerStyle = {\n  container: {\n    backgroundColor: \"#131C47\",\n    //   },\n    //   listText: {\n    //     color: \"#ffffff\",\n    //     fontSize: \"1em\",\n    //     fontFamily: \"Helvetica, sans-serif\",\n    //     lineHeight: \"1em\",\n    //     fontWeight: 100,\n  },\n};\n\nconst Footer = () => {\n  return (\n    <Container sx={footerStyle.container} maxWidth={false}>\n      <Grid container spacing={9} sx={{ padding: 5, mt: 0.2 }}>\n        <Grid item xs={12} sm={12} md={6} lg={6}>\n          <Box>\n            <Typography variant=\"h2\" color=\"primary.contrastText\">\n              Neat-o Name Generator\n            </Typography>\n            <Typography variant=\"p\" color=\"primary.contrastText\">\n              Use this app to call on students at random in your class! This\n              way, all your students participate equally.\n            </Typography>\n          </Box>\n        </Grid>\n\n        <Grid item xs={12} sm={12} md={6} lg={6}>\n          <Typography variant=\"h2\" color=\"primary.contrastText\">\n            Meet the Developer\n          </Typography>\n          <Link\n            href=\"https://github.com/chandrapanda\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Chandra Holt\n          </Link>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Footer;\n","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/Navbar/index.js",[],[],"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js",["42"],[],"import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n  Chip,\n} from \"@mui/material\";\n\n\n//Styling\nconst fieldStyle = {\n  backgroundColor: \"white\",\n};\n\n//Declare export here\nconst StudentList = () => {\n  //Initialize student list as an empty array of objects\n  const [studentNames, setStudentNames] = useState([\n    // { id: \"\", studentName: \"\" },\n    // { id: \"1\", studentName: \"Leah\" },\n  ]);\n\n  //Set local storage items as student names\n  // useEffect(() => {\n  //   const studentNames = JSON.parse(localStorage.getItem(\"studentNames\"));\n  //   if (studentNames) {\n  //     setStudentNames(studentNames);\n  //   } else {\n  //     return \"There are no student names yet.\";\n  //   }\n  //   localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  // }, [studentNames]);\n  // console.log(\"Here is the first test of student name array \", studentNames);\n\n  //Initialize Add Student form variable\n  const [formState, setFormState] = useState({\n    newStudentName: \"\",\n  });\n\n  const { newStudentName } = formState;\n\n  //When user enters a name into the text field, declare this as target for form state\n  const handleFormChange = (event) => {\n    const { name, value } = event.target;\n    console.log(\"handleFormChange is running\");\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    // handleAddName();\n    // try {\n    //   setFormState((event) => ({\n    //     ...formState,\n    //     newStudentName: event.target.value,\n    //   }));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  //Add entered name to array\n  const handleAddName = async (event) => {\n    console.log(\"handleAddName is running\");\n    // event.preventDefault();\n    //Check formState\n    console.log(\"FormState = \" + formState);\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(\"handleFormChange: \" + name, value);\n    try {\n      setFormState({\n        studentName: \"\",\n      });\n      setStudentNames((studentNames) => [...studentNames, { [name]: value }]);\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n\n    console.log(\"The add name button is working!\");\n\n    // try {\n    //   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  console.log(\n    \"Here are the student names by the end of the code: \" + studentNames\n  );\n\n  //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // \"Larry Smith\",\n  // \"Dora Jones\",\n  // \"Ahmed Mohamed\",\n  // \"Tuan Hong\",\n  // \"Sandra Cuervo\",\n  // ];\n\n  //Initialize random student variable\n  const [randomStudent, setRandomStudent] = useState();\n\n  // TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n\n  //TODO: Permutate array .. Make sure each student can only be called on once per iteration\n\n  //Generates a random name from given array\n  const generateRandomName = () => {\n    setRandomStudent(\n      studentNames[Math.floor(Math.random() * studentNames.length)]\n    );\n  };\n  //Calls above function onClick\n  const handleGenerate = () => {\n    generateRandomName();\n    console.log(\"The generate random button is working!\");\n  };\n\n  console.log(\n    \"Here is the random student name variable outside all functions: \" +\n      randomStudent\n  );\n\n  return (\n    <Box>\n      <FormControl>\n        <p>Enter a student's name and click \"ADD NAME TO LIST\".</p>\n        <TextField\n          id=\"student-name-form\"\n          name=\"newStudentName\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          value={newStudentName}\n          onChange={handleFormChange}\n          sx={fieldStyle}\n          InputLabelProps={{ shrink: true }}\n        ></TextField>\n\n        <Button\n          id=\"add-name-button\"\n          variant=\"contained\"\n          sx={{ mt: 4, mb: 2 }}\n          onClick={() => handleAddName()}\n        >\n          Add name to list\n        </Button>\n        <p>To select a random name, click \"GENERATE A RANDOM NAME\".</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          onClick={() => handleGenerate()}\n        >\n          Generate a random name\n        </Button>\n        <Chip\n          variant=\"outlined\"\n          label={randomStudent}\n          sx={{ backgroundColor: \"white\", mt: 4, mb: 2 }}\n          // color=\"primary\"\n        />\n      </FormControl>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n            <List id=\"student-name-list\">\n              {studentNames.map((student) => {\n                return <ListItem key={student}>{student} </ListItem>;\n              })}\n            </List>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n","/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/Table/index.js",[],[],{"ruleId":"43","severity":1,"message":"44","line":9,"column":3,"nodeType":"45","messageId":"46","endLine":9,"endColumn":7},{"ruleId":"43","severity":1,"message":"47","line":10,"column":3,"nodeType":"45","messageId":"46","endLine":10,"endColumn":11},{"ruleId":"43","severity":1,"message":"48","line":2,"column":20,"nodeType":"45","messageId":"46","endLine":2,"endColumn":29},"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'ListItem' is defined but never used.","'useEffect' is defined but never used."]