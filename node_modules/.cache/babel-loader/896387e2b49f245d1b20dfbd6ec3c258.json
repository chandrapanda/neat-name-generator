{"ast":null,"code":"var _jsxFileName = \"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Box, Grid, Typography, List, ListItem, TextField, FormControl, Button, Chip } from \"@mui/material\"; //Styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fieldStyle = {\n  background: \"white\"\n}; //Declare export here\n\nconst StudentList = () => {\n  _s();\n\n  //Declare student list as an empty array\n  const [studentNames, setStudentNames] = useState([\"Larry Smith\", \"Dora Jones\", \"Ahmed Mohamed\", \"Tuan Hong\"]); //set local storage items as student names\n\n  useEffect(() => {\n    localStorage.setItem(\"studentNames\", studentNames);\n  });\n  console.log(\"Here is the first test\", studentNames); //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // ];\n  //initialize random student variable\n\n  let randomStudent; // TODO: Create function to map over student names after seeds are ready\n\n  const handleGenerate = () => {\n    console.log(\"The generate random button is working!\");\n    randomStudent = studentNames[Math.floor(Math.random() * studentNames.length)];\n  };\n\n  const [formState, setFormState] = useState({\n    studentName: \"\"\n  }); //When user enters a name into the text field, declare this as target for form state\n\n  const handleFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormState({ ...formState,\n      [name]: value\n    });\n  }; //Add entered name to array\n\n\n  const handleAddName = async event => {\n    console.log(formState);\n    console.log(\"The add name button is working!\");\n    setStudentNames(studentNames => studentNames.concat());\n  };\n\n  console.log(studentNames);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"student-name-form\",\n        variant: \"outlined\",\n        label: \"Write a name\",\n        color: \"primary\",\n        onChange: handleFormChange,\n        sx: fieldStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a student's name and click \\\"ADD NAME TO LIST\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"add-name-button\",\n        variant: \"contained\",\n        onClick: () => handleAddName(),\n        children: \"Add name to list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To select a random name, click \\\"GENERATE A RANDOM NAME\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"generate-button\",\n        variant: \"contained\",\n        onClick: () => handleGenerate(),\n        children: \"Generate a random name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        variant: \"outlined\",\n        label: randomStudent,\n        sx: (fieldStyle, {\n          mt: 4,\n          mb: 2\n        }) // color=\"primary\"\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 4,\n            mb: 2\n          },\n          variant: \"h6\",\n          component: \"div\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            id: \"student-name-list\",\n            children: studentNames.map(student => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [student, \" \"]\n              }, student, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StudentList, \"c7rHUQL/SVfGdPOC0YzbCI9rQXQ=\");\n\n_c = StudentList;\nexport default StudentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","Chip","fieldStyle","background","StudentList","studentNames","setStudentNames","localStorage","setItem","console","log","randomStudent","handleGenerate","Math","floor","random","length","formState","setFormState","studentName","handleFormChange","event","name","value","target","handleAddName","concat","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n  Chip,\n} from \"@mui/material\";\n\n//Styling\nconst fieldStyle = {\n  background: \"white\",\n};\n\n//Declare export here\nconst StudentList = () => {\n  //Declare student list as an empty array\n  const [studentNames, setStudentNames] = useState([\n    \"Larry Smith\",\n    \"Dora Jones\",\n    \"Ahmed Mohamed\",\n    \"Tuan Hong\",\n  ]);\n  //set local storage items as student names\n  useEffect(() => {\n    localStorage.setItem(\"studentNames\", studentNames);\n  });\n  console.log(\"Here is the first test\", studentNames);\n\n  //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // ];\n\n  //initialize random student variable\n  let randomStudent;\n\n  // TODO: Create function to map over student names after seeds are ready\n  const handleGenerate = () => {\n    console.log(\"The generate random button is working!\");\n    randomStudent =\n      studentNames[Math.floor(Math.random() * studentNames.length)];\n  };\n\n  const [formState, setFormState] = useState({\n    studentName: \"\",\n  });\n\n  //When user enters a name into the text field, declare this as target for form state\n  const handleFormChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  //Add entered name to array\n  const handleAddName = async (event) => {\n    console.log(formState);\n\n    console.log(\"The add name button is working!\");\n\n    setStudentNames((studentNames) => studentNames.concat());\n  };\n\n  console.log(studentNames);\n\n  return (\n    <Box>\n      <FormControl>\n        <TextField\n          id=\"student-name-form\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          onChange={handleFormChange}\n          sx={fieldStyle}\n        ></TextField>\n        <p>Enter a student's name and click \"ADD NAME TO LIST\".</p>\n        <Button\n          id=\"add-name-button\"\n          variant=\"contained\"\n          onClick={() => handleAddName()}\n        >\n          Add name to list\n        </Button>\n        <p>To select a random name, click \"GENERATE A RANDOM NAME\".</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          onClick={() => handleGenerate()}\n        >\n          Generate a random name\n        </Button>\n        <Chip\n          variant=\"outlined\"\n          label={randomStudent}\n          sx={(fieldStyle, { mt: 4, mb: 2 })}\n          // color=\"primary\"\n        />\n      </FormControl>\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n            <List id=\"student-name-list\">\n              {studentNames.map((student) => {\n                return <ListItem key={student}>{student} </ListItem>;\n              })}\n            </List>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}