{"ast":null,"code":"var _jsxFileName = \"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Box, Grid, Typography, List, ListItem, TextField, FormControl, Button, Chip } from \"@mui/material\"; //Styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fieldStyle = {\n  backgroundColor: \"white\"\n}; //Declare export here\n\nconst StudentList = () => {\n  _s();\n\n  //Initialize student list as an empty array\n  const [studentNames, setStudentNames] = useState([\"Larry Smith\", \"Dora Jones\", \"Ahmed Mohamed\", \"Tuan Hong\"]); //set local storage items as student names\n\n  useEffect(() => {\n    localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  });\n  console.log(\"Here is the first test\", studentNames); //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // ];\n  //initialize random student variable\n\n  let randomStudent; // TODO: Create function to map over student names after seeds are ready\n  //TODO: Make sure each student can only be called on once per iteration\n  //Generates a random name from given array\n\n  const handleGenerate = () => {\n    console.log(\"The generate random button is working!\");\n    randomStudent = studentNames[Math.floor(Math.random() * studentNames.length)];\n    console.log(\"GENERATE BUTTON \" + randomStudent);\n    setRandomStudent(randomStudent);\n  };\n\n  console.log(\"Here is the random student name variable: \" + randomStudent);\n  const [formState, setFormState] = useState({\n    newStudentName: \"\"\n  }); //When user enters a name into the text field, declare this as target for form state\n\n  const handleFormChange = event => {\n    event.persist();\n\n    try {\n      setFormState({ ...formState,\n        newStudentName: event.target.value\n      });\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n  }; //Add entered name to array\n\n\n  const handleAddName = newStudentName => {\n    //Check formState\n    console.log(formState);\n    console.log(\"The add name button is working!\");\n\n    try {\n      setStudentNames(studentNames => studentNames.concat(newStudentName));\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n  };\n\n  console.log(\"Here are the student names: \" + studentNames);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a student's name and click \\\"ADD NAME TO LIST\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"student-name-form\",\n        variant: \"outlined\",\n        label: \"Write a name\",\n        color: \"primary\",\n        value: formState.newStudentName,\n        onChange: handleFormChange,\n        sx: fieldStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"add-name-button\",\n        variant: \"contained\",\n        sx: {\n          mt: 4,\n          mb: 2\n        },\n        onClick: () => handleAddName(),\n        children: \"Add name to list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To select a random name, click \\\"GENERATE A RANDOM NAME\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"generate-button\",\n        variant: \"contained\",\n        onClick: () => handleGenerate(),\n        children: \"Generate a random name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        variant: \"outlined\",\n        label: randomStudent,\n        sx: {\n          backgroundColor: \"white\",\n          mt: 4,\n          mb: 2\n        } // color=\"primary\"\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 4,\n            mb: 2\n          },\n          variant: \"h6\",\n          component: \"div\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            id: \"student-name-list\",\n            children: studentNames.map(student => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [student, \" \"]\n              }, student, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StudentList, \"Ynq3yxIafFBHWfiA8s6J+yuWQdA=\");\n\n_c = StudentList;\nexport default StudentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","Chip","fieldStyle","backgroundColor","StudentList","studentNames","setStudentNames","localStorage","setItem","JSON","stringify","console","log","randomStudent","handleGenerate","Math","floor","random","length","setRandomStudent","formState","setFormState","newStudentName","handleFormChange","event","persist","target","value","err","handleAddName","concat","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n  Chip,\n} from \"@mui/material\";\n\n//Styling\nconst fieldStyle = {\n  backgroundColor: \"white\",\n};\n\n//Declare export here\nconst StudentList = () => {\n  //Initialize student list as an empty array\n  const [studentNames, setStudentNames] = useState([\n    \"Larry Smith\",\n    \"Dora Jones\",\n    \"Ahmed Mohamed\",\n    \"Tuan Hong\",\n  ]);\n  //set local storage items as student names\n  useEffect(() => {\n    localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  });\n  console.log(\"Here is the first test\", studentNames);\n\n  //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // ];\n\n  //initialize random student variable\n  let randomStudent;\n\n  // TODO: Create function to map over student names after seeds are ready\n\n  //TODO: Make sure each student can only be called on once per iteration\n\n  //Generates a random name from given array\n  const handleGenerate = () => {\n    console.log(\"The generate random button is working!\");\n    randomStudent =\n      studentNames[Math.floor(Math.random() * studentNames.length)];\n    console.log(\"GENERATE BUTTON \" + randomStudent);\n    setRandomStudent(randomStudent);\n  };\n  console.log(\"Here is the random student name variable: \" + randomStudent);\n\n  const [formState, setFormState] = useState({\n    newStudentName: \"\",\n  });\n\n  //When user enters a name into the text field, declare this as target for form state\n  const handleFormChange = (event) => {\n    event.persist();\n\n    try {\n      setFormState({\n        ...formState,\n        newStudentName: event.target.value,\n      });\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n  };\n\n  //Add entered name to array\n  const handleAddName = (newStudentName) => {\n    //Check formState\n    console.log(formState);\n\n    console.log(\"The add name button is working!\");\n\n    try {\n      setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n  };\n\n  console.log(\"Here are the student names: \" + studentNames);\n\n  return (\n    <Box>\n      <FormControl>\n        <p>Enter a student's name and click \"ADD NAME TO LIST\".</p>\n        <TextField\n          id=\"student-name-form\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          value={formState.newStudentName}\n          onChange={handleFormChange}\n          sx={fieldStyle}\n        ></TextField>\n\n        <Button\n          id=\"add-name-button\"\n          variant=\"contained\"\n          sx={{ mt: 4, mb: 2 }}\n          onClick={() => handleAddName()}\n        >\n          Add name to list\n        </Button>\n        <p>To select a random name, click \"GENERATE A RANDOM NAME\".</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          onClick={() => handleGenerate()}\n        >\n          Generate a random name\n        </Button>\n        <Chip\n          variant=\"outlined\"\n          label={randomStudent}\n          sx={{ backgroundColor: \"white\", mt: 4, mb: 2 }}\n          // color=\"primary\"\n        />\n      </FormControl>\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n            <List id=\"student-name-list\">\n              {studentNames.map((student) => {\n                return <ListItem key={student}>{student} </ListItem>;\n              })}\n            </List>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,WAPF,EAQEC,MARF,EASEC,IATF,QAUO,eAVP,C,CAYA;;;AACA,MAAMC,UAAU,GAAG;EACjBC,eAAe,EAAE;AADA,CAAnB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,CAC/C,aAD+C,EAE/C,YAF+C,EAG/C,eAH+C,EAI/C,WAJ+C,CAAD,CAAhD,CAFwB,CAQxB;;EACAC,SAAS,CAAC,MAAM;IACde,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeL,YAAf,CAArC;EACD,CAFQ,CAAT;EAGAM,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCP,YAAtC,EAZwB,CAcxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACA,IAAIQ,aAAJ,CA5BwB,CA8BxB;EAEA;EAEA;;EACA,MAAMC,cAAc,GAAG,MAAM;IAC3BH,OAAO,CAACC,GAAR,CAAY,wCAAZ;IACAC,aAAa,GACXR,YAAY,CAACU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBZ,YAAY,CAACa,MAAxC,CAAD,CADd;IAEAP,OAAO,CAACC,GAAR,CAAY,qBAAqBC,aAAjC;IACAM,gBAAgB,CAACN,aAAD,CAAhB;EACD,CAND;;EAOAF,OAAO,CAACC,GAAR,CAAY,+CAA+CC,aAA3D;EAEA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC;IACzC+B,cAAc,EAAE;EADyB,CAAD,CAA1C,CA5CwB,CAgDxB;;EACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;IAClCA,KAAK,CAACC,OAAN;;IAEA,IAAI;MACFJ,YAAY,CAAC,EACX,GAAGD,SADQ;QAEXE,cAAc,EAAEE,KAAK,CAACE,MAAN,CAAaC;MAFlB,CAAD,CAAZ;IAID,CALD,CAKE,OAAOC,GAAP,EAAY;MACZjB,OAAO,CAACC,GAAR,CAAa,UAASgB,GAAI,EAA1B;IACD;EACF,CAXD,CAjDwB,CA8DxB;;;EACA,MAAMC,aAAa,GAAIP,cAAD,IAAoB;IACxC;IACAX,OAAO,CAACC,GAAR,CAAYQ,SAAZ;IAEAT,OAAO,CAACC,GAAR,CAAY,iCAAZ;;IAEA,IAAI;MACFN,eAAe,CAAED,YAAD,IAAkBA,YAAY,CAACyB,MAAb,CAAoBR,cAApB,CAAnB,CAAf;IACD,CAFD,CAEE,OAAOM,GAAP,EAAY;MACZjB,OAAO,CAACC,GAAR,CAAa,UAASgB,GAAI,EAA1B;IACD;EACF,CAXD;;EAaAjB,OAAO,CAACC,GAAR,CAAY,iCAAiCP,YAA7C;EAEA,oBACE,QAAC,GAAD;IAAA,wBACE,QAAC,WAAD;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,SAAD;QACE,EAAE,EAAC,mBADL;QAEE,OAAO,EAAC,UAFV;QAGE,KAAK,EAAC,cAHR;QAIE,KAAK,EAAC,SAJR;QAKE,KAAK,EAAEe,SAAS,CAACE,cALnB;QAME,QAAQ,EAAEC,gBANZ;QAOE,EAAE,EAAErB;MAPN;QAAA;QAAA;QAAA;MAAA,QAFF,eAYE,QAAC,MAAD;QACE,EAAE,EAAC,iBADL;QAEE,OAAO,EAAC,WAFV;QAGE,EAAE,EAAE;UAAE6B,EAAE,EAAE,CAAN;UAASC,EAAE,EAAE;QAAb,CAHN;QAIE,OAAO,EAAE,MAAMH,aAAa,EAJ9B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAZF,eAoBE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QApBF,eAqBE,QAAC,MAAD;QACE,EAAE,EAAC,iBADL;QAEE,OAAO,EAAC,WAFV;QAGE,OAAO,EAAE,MAAMf,cAAc,EAH/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QArBF,eA4BE,QAAC,IAAD;QACE,OAAO,EAAC,UADV;QAEE,KAAK,EAAED,aAFT;QAGE,EAAE,EAAE;UAAEV,eAAe,EAAE,OAAnB;UAA4B4B,EAAE,EAAE,CAAhC;UAAmCC,EAAE,EAAE;QAAvC,CAHN,CAIE;;MAJF;QAAA;QAAA;QAAA;MAAA,QA5BF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAqCE,QAAC,IAAD;MAAM,SAAS,MAAf;MAAgB,OAAO,EAAE,CAAzB;MAAA,uBACE,QAAC,IAAD;QAAM,IAAI,MAAV;QAAW,EAAE,EAAE,EAAf;QAAmB,EAAE,EAAE,CAAvB;QAAA,uBACE,QAAC,UAAD;UAAY,EAAE,EAAE;YAAED,EAAE,EAAE,CAAN;YAASC,EAAE,EAAE;UAAb,CAAhB;UAAkC,OAAO,EAAC,IAA1C;UAA+C,SAAS,EAAC,KAAzD;UAAA,uBACE,QAAC,IAAD;YAAM,EAAE,EAAC,mBAAT;YAAA,UACG3B,YAAY,CAAC4B,GAAb,CAAkBC,OAAD,IAAa;cAC7B,oBAAO,QAAC,QAAD;gBAAA,WAAyBA,OAAzB;cAAA,GAAeA,OAAf;gBAAA;gBAAA;gBAAA;cAAA,QAAP;YACD,CAFA;UADH;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QArCF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmDD,CAjID;;GAAM9B,W;;KAAAA,W;AAkIN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}