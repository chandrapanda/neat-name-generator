{"ast":null,"code":"var _jsxFileName = \"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js\";\nimport * as React from \"react\";\nimport { Box, Grid, Typography, List, ListItem, TextField, FormControl, Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fieldStyle = {\n  background: \"white\"\n};\nlet studentNames = [\"Mary\", \"Joaquim\", \"Ahmed\", \"Jules\", \"Tuan\"]; // TODO: Create function to map over student names after seeds are ready\n\nconst handleGenerate = () => studentNames.push(studentNames); // function displayStudentList() {\n//   return [0, 1, 2].map((value) =>\n//     React.cloneElement(studentName, {\n//       key: value,\n//     })\n//   );\n// }\n//Allows user to enter a name, prints to page\n// function addName(event) {\n//   event.preventDefault();\n//   if (document.getElementById(\"student-name-form\").value.length <= 2) {\n//       alert(\"Please write two or more characters.\")\n//       return;\n//   }\n//   document.getElementById(\"timer\").style.display = \"none\";\n//   //User high score and initials are stored and available on page load\n//   var highScore = {\n//       score: count,\n//       initials: document.getElementById(\"initials\").value\n//   }\n//   if (!highScores) {\n//       highScores = [];\n//   }\n//   //hides form after score is logged to console to prevent multiple entries\n//   document.getElementById(\"initial-form\").style.display = \"none\";\n//   //shows high scores from all previous games saved\n//   document.getElementById(\"high-scores\").style.display = \"block\";\n//   //displays button to retake quiz\n//   document.getElementById(\"retake-quiz\").style.display = \"inline-block\";\n//   highScores.push(highScore);\n//   //User high score and initials are displayed on page after 'SUBMIT' is clicked inside the \"score-list\" ol\n//   //Make a list item per user submission and display on page\n//   for (let index=0; index < highScores.length; index++) {\n//       var currentHighScore = highScores[index];\n//       var userScore = document.createElement(\"li\");\n//       userScore.innerHTML = currentHighScore.initials + \" : \" + currentHighScore.score;\n//       document.getElementById(\"score-list\").appendChild(userScore);\n//   }\n//   localStorage.setItem(\"highScores\", JSON.stringify(highScores));\n// }\n// function reloadPage() {\n//   reload = location.reload();\n// }\n\n\nconsole.log(studentNames);\n\nconst StudentList = () => {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"playerFirstName\",\n      name: \"playerFirstName\",\n      label: \"First Name\",\n      variant: \"outlined\",\n      color: \"secondary\",\n      value: firstName,\n      onChange: handleFormChange,\n      InputLabelProps: {\n        shrink: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"playerLastName\",\n      name: \"playerLastName\",\n      label: \"Last Name\",\n      variant: \"outlined\",\n      color: \"secondary\",\n      value: playerLastName,\n      onChange: handleFormChange,\n      InputLabelProps: {\n        shrink: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"student-name-form\",\n        variant: \"outlined\",\n        label: \"Write a name\",\n        color: \"primary\",\n        sx: fieldStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a student's name and click \\\"GENERATE\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"generate-button\",\n        variant: \"contained\",\n        onClick: () => handleGenerate,\n        children: [\" \", \"Generate\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 4,\n            mb: 2\n          },\n          variant: \"h6\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          id: \"student-name-list\",\n          children: studentNames.map(student => {\n            return /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [student, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_c = StudentList;\nexport default StudentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","fieldStyle","background","studentNames","handleGenerate","push","console","log","StudentList","firstName","handleFormChange","shrink","playerLastName","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n} from \"@mui/material\";\n\nconst fieldStyle = {\n  background: \"white\",\n};\n\nlet studentNames = [\"Mary\", \"Joaquim\", \"Ahmed\", \"Jules\", \"Tuan\"];\n\n// TODO: Create function to map over student names after seeds are ready\nconst handleGenerate = () => studentNames.push(studentNames);\n// function displayStudentList() {\n//   return [0, 1, 2].map((value) =>\n//     React.cloneElement(studentName, {\n//       key: value,\n//     })\n//   );\n// }\n\n//Allows user to enter a name, prints to page\n// function addName(event) {\n//   event.preventDefault();\n//   if (document.getElementById(\"student-name-form\").value.length <= 2) {\n//       alert(\"Please write two or more characters.\")\n//       return;\n//   }\n//   document.getElementById(\"timer\").style.display = \"none\";\n//   //User high score and initials are stored and available on page load\n//   var highScore = {\n//       score: count,\n//       initials: document.getElementById(\"initials\").value\n//   }\n//   if (!highScores) {\n//       highScores = [];\n//   }\n//   //hides form after score is logged to console to prevent multiple entries\n//   document.getElementById(\"initial-form\").style.display = \"none\";\n//   //shows high scores from all previous games saved\n//   document.getElementById(\"high-scores\").style.display = \"block\";\n//   //displays button to retake quiz\n//   document.getElementById(\"retake-quiz\").style.display = \"inline-block\";\n\n//   highScores.push(highScore);\n\n//   //User high score and initials are displayed on page after 'SUBMIT' is clicked inside the \"score-list\" ol\n\n//   //Make a list item per user submission and display on page\n\n//   for (let index=0; index < highScores.length; index++) {\n//       var currentHighScore = highScores[index];\n//       var userScore = document.createElement(\"li\");\n//       userScore.innerHTML = currentHighScore.initials + \" : \" + currentHighScore.score;\n//       document.getElementById(\"score-list\").appendChild(userScore);\n\n//   }\n\n//   localStorage.setItem(\"highScores\", JSON.stringify(highScores));\n// }\n// function reloadPage() {\n//   reload = location.reload();\n// }\n\nconsole.log(studentNames);\n\nconst StudentList = () => {\n  return (\n    <Box>\n                <TextField\n            id=\"playerFirstName\"\n            name=\"playerFirstName\"\n            label=\"First Name\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            value={firstName}\n            onChange={handleFormChange}\n            InputLabelProps={{ shrink: true }}\n          />\n\n          <TextField\n            id=\"playerLastName\"\n            name=\"playerLastName\"\n            label=\"Last Name\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            value={playerLastName}\n            onChange={handleFormChange}\n            InputLabelProps={{ shrink: true }}\n          />\n      <FormControl>\n        <TextField\n          id=\"student-name-form\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          sx={fieldStyle}\n        ></TextField>\n        <p>Enter a student's name and click \"GENERATE\"</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          onClick={() => handleGenerate}\n        >\n          {\" \"}\n          Generate{\" \"}\n        </Button>\n      </FormControl>\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography\n            sx={{ mt: 4, mb: 2 }}\n            variant=\"h6\"\n            component=\"div\"\n          ></Typography>\n          <List id=\"student-name-list\">\n            {studentNames.map((student) => {\n              return <ListItem>{student} </ListItem>;\n            })}\n          </List>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}