{"ast":null,"code":"var _jsxFileName = \"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js\";\nimport * as React from \"react\";\nimport { Box, Grid, Typography, List, ListItem, TextField, FormControl, Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fieldStyle = {\n  background: \"white\"\n};\nlet studentNames = [\"Mary\", \"Joaquim\", \"Ahmed\", \"Jules\", \"Tuan\"]; // TODO: Create function to map over student names after seeds are ready\n\nconst handleGenerate = () => studentNames.push(studentNames); // function displayStudentList() {\n//   return [0, 1, 2].map((value) =>\n//     React.cloneElement(studentName, {\n//       key: value,\n//     })\n//   );\n// }\n//Allows user to enter a name, prints to page\n// function addName(event) {\n//   event.preventDefault();\n//   if (document.getElementById(\"student-name-form\").value.length <= 2) {\n//       alert(\"Please write two or more characters.\")\n//       return;\n//   }\n//   document.getElementById(\"timer\").style.display = \"none\";\n//   //User high score and initials are stored and available on page load\n//   var highScore = {\n//       score: count,\n//       initials: document.getElementById(\"initials\").value\n//   }\n//   if (!highScores) {\n//       highScores = [];\n//   }\n//   //hides form after score is logged to console to prevent multiple entries\n//   document.getElementById(\"initial-form\").style.display = \"none\";\n//   //shows high scores from all previous games saved\n//   document.getElementById(\"high-scores\").style.display = \"block\";\n//   //displays button to retake quiz\n//   document.getElementById(\"retake-quiz\").style.display = \"inline-block\";\n//   highScores.push(highScore);\n//   //User high score and initials are displayed on page after 'SUBMIT' is clicked inside the \"score-list\" ol\n//   //Make a list item per user submission and display on page\n//   for (let index=0; index < highScores.length; index++) {\n//       var currentHighScore = highScores[index];\n//       var userScore = document.createElement(\"li\");\n//       userScore.innerHTML = currentHighScore.initials + \" : \" + currentHighScore.score;\n//       document.getElementById(\"score-list\").appendChild(userScore);\n//   }\n//   localStorage.setItem(\"highScores\", JSON.stringify(highScores));\n// }\n// function reloadPage() {\n//   reload = location.reload();\n// }\n\n\nconst handleFormChange = event => {\n  const {\n    name,\n    value\n  } = event.target;\n  console.log(studentNames);\n\n  const StudentList = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"playerFirstName\",\n        name: \"playerFirstName\",\n        label: \"First Name\",\n        variant: \"outlined\",\n        color: \"secondary\",\n        value: firstName,\n        onChange: handleFormChange,\n        InputLabelProps: {\n          shrink: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"playerLastName\",\n        name: \"playerLastName\",\n        label: \"Last Name\",\n        variant: \"outlined\",\n        color: \"secondary\",\n        value: lastName,\n        onChange: handleFormChange,\n        InputLabelProps: {\n          shrink: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"student-name-form\",\n          variant: \"outlined\",\n          label: \"Write a name\",\n          color: \"primary\",\n          sx: fieldStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Enter a student's name and click \\\"GENERATE\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"generate-button\",\n          variant: \"contained\",\n          onClick: () => handleGenerate,\n          children: [\" \", \"Generate\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              mt: 4,\n              mb: 2\n            },\n            variant: \"h6\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            id: \"student-name-list\",\n            children: studentNames.map(student => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [student, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 22\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this);\n  };\n};\n\nexport default StudentList;","map":{"version":3,"names":["React","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","fieldStyle","background","studentNames","handleGenerate","push","handleFormChange","event","name","value","target","console","log","StudentList","firstName","shrink","lastName","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n} from \"@mui/material\";\n\nconst fieldStyle = {\n  background: \"white\",\n};\n\nlet studentNames = [\"Mary\", \"Joaquim\", \"Ahmed\", \"Jules\", \"Tuan\"];\n\n// TODO: Create function to map over student names after seeds are ready\nconst handleGenerate = () => studentNames.push(studentNames);\n// function displayStudentList() {\n//   return [0, 1, 2].map((value) =>\n//     React.cloneElement(studentName, {\n//       key: value,\n//     })\n//   );\n// }\n\n//Allows user to enter a name, prints to page\n// function addName(event) {\n//   event.preventDefault();\n//   if (document.getElementById(\"student-name-form\").value.length <= 2) {\n//       alert(\"Please write two or more characters.\")\n//       return;\n//   }\n//   document.getElementById(\"timer\").style.display = \"none\";\n//   //User high score and initials are stored and available on page load\n//   var highScore = {\n//       score: count,\n//       initials: document.getElementById(\"initials\").value\n//   }\n//   if (!highScores) {\n//       highScores = [];\n//   }\n//   //hides form after score is logged to console to prevent multiple entries\n//   document.getElementById(\"initial-form\").style.display = \"none\";\n//   //shows high scores from all previous games saved\n//   document.getElementById(\"high-scores\").style.display = \"block\";\n//   //displays button to retake quiz\n//   document.getElementById(\"retake-quiz\").style.display = \"inline-block\";\n\n//   highScores.push(highScore);\n\n//   //User high score and initials are displayed on page after 'SUBMIT' is clicked inside the \"score-list\" ol\n\n//   //Make a list item per user submission and display on page\n\n//   for (let index=0; index < highScores.length; index++) {\n//       var currentHighScore = highScores[index];\n//       var userScore = document.createElement(\"li\");\n//       userScore.innerHTML = currentHighScore.initials + \" : \" + currentHighScore.score;\n//       document.getElementById(\"score-list\").appendChild(userScore);\n\n//   }\n\n//   localStorage.setItem(\"highScores\", JSON.stringify(highScores));\n// }\n// function reloadPage() {\n//   reload = location.reload();\n// }\n\nconst handleFormChange = (event) => {\n  const { name, value } = event.target;\n\nconsole.log(studentNames);\n\nconst StudentList = () => {\n  return (\n    <Box>\n                <TextField\n            id=\"playerFirstName\"\n            name=\"playerFirstName\"\n            label=\"First Name\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            value={firstName}\n            onChange={handleFormChange}\n            InputLabelProps={{ shrink: true }}\n          />\n\n          <TextField\n            id=\"playerLastName\"\n            name=\"playerLastName\"\n            label=\"Last Name\"\n            variant=\"outlined\"\n            color=\"secondary\"\n            value={lastName}\n            onChange={handleFormChange}\n            InputLabelProps={{ shrink: true }}\n          />\n      <FormControl>\n        <TextField\n          id=\"student-name-form\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          sx={fieldStyle}\n        ></TextField>\n        <p>Enter a student's name and click \"GENERATE\"</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          onClick={() => handleGenerate}\n        >\n          {\" \"}\n          Generate{\" \"}\n        </Button>\n      </FormControl>\n\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography\n            sx={{ mt: 4, mb: 2 }}\n            variant=\"h6\"\n            component=\"div\"\n          ></Typography>\n          <List id=\"student-name-list\">\n            {studentNames.map((student) => {\n              return <ListItem>{student} </ListItem>;\n            })}\n          </List>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n}\nexport default StudentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}