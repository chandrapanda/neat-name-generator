{"ast":null,"code":"var _jsxFileName = \"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Box, Grid, Typography, List, ListItem, TextField, FormControl, Button, Chip } from \"@mui/material\"; //Styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fieldStyle = {\n  backgroundColor: \"white\"\n}; //Declare export here\n\nconst StudentList = () => {\n  _s();\n\n  //Initialize student list as an empty array of objects\n  const [studentNames, setStudentNames] = useState([{\n    id: \"\",\n    studentName: \"\"\n  } // { id: \"1\", studentName: \"Leah\" },\n  ]); //Set local storage items as student names\n\n  useEffect(() => {\n    const studentNames = JSON.parse(localStorage.getItem(\"studentNames\"));\n\n    if (studentNames) {\n      setStudentNames(studentNames);\n    } else {\n      return \"There are no student names yet.\";\n    }\n\n    localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  }, [studentNames]);\n  console.log(\"Here is the first test of student name array \", studentNames);\n  const [formState, setFormState] = useState({\n    newStudentName: \"\"\n  });\n  const {\n    newStudentName\n  } = formState; //Add entered name to array\n\n  const handleAddName = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(\"handleFormChange: \" + name, value);\n\n    try {\n      setStudentNames(studentNames => [...studentNames, {\n        [name]: value\n      }]);\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    } //Check formState\n\n\n    console.log(\"FormState = \" + formState);\n    console.log(\"The add name button is working!\"); // try {\n    //   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  }; //When user enters a name into the text field, declare this as target for form state\n\n\n  const handleFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormState({ ...formState,\n      [name]: value\n    }); // handleAddName();\n    // try {\n    //   setFormState((event) => ({\n    //     ...formState,\n    //     newStudentName: event.target.value,\n    //   }));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  console.log(\"Here are the student names by the end of the code: \" + studentNames); //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // \"Larry Smith\",\n  // \"Dora Jones\",\n  // \"Ahmed Mohamed\",\n  // \"Tuan Hong\",\n  // \"Sandra Cuervo\",\n  // ];\n  //Initialize random student variable\n\n  const [randomStudent, setRandomStudent] = useState(); // TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n  //TODO: Permutate array .. Make sure each student can only be called on once per iteration\n  //Generates a random name from given array\n\n  const generateRandomName = () => {\n    setRandomStudent(studentNames[Math.floor(Math.random() * studentNames.length)]);\n  }; //Calls above function onClick\n\n\n  const handleGenerate = () => {\n    generateRandomName();\n    console.log(\"The generate random button is working!\");\n  };\n\n  console.log(\"Here is the random student name variable outside all functions: \" + randomStudent);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddName,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Enter a student's name and click \\\"ADD NAME TO LIST\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"student-name-form\",\n          name: \"newStudentName\",\n          variant: \"outlined\",\n          label: \"Write a name\",\n          color: \"primary\",\n          value: newStudentName,\n          onChange: handleFormChange,\n          sx: fieldStyle,\n          InputLabelProps: {\n            shrink: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"add-name-button\",\n          variant: \"contained\",\n          sx: {\n            mt: 4,\n            mb: 2\n          } // onClick={() => handleAddName()}\n          ,\n          children: \"Add name to list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"To select a random name, click \\\"GENERATE A RANDOM NAME\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"generate-button\",\n          variant: \"contained\",\n          onClick: () => handleGenerate(),\n          children: \"Generate a random name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          variant: \"outlined\",\n          label: randomStudent,\n          sx: {\n            backgroundColor: \"white\",\n            mt: 4,\n            mb: 2\n          } // color=\"primary\"\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 4,\n            mb: 2\n          },\n          variant: \"h6\",\n          component: \"div\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            id: \"student-name-list\",\n            children: studentNames.map(student => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [student, \" \"]\n              }, student, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StudentList, \"jYBU3RYFMhBA4mugv89H6SAaBMI=\");\n\n_c = StudentList;\nexport default StudentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","Chip","fieldStyle","backgroundColor","StudentList","studentNames","setStudentNames","id","studentName","JSON","parse","localStorage","getItem","setItem","stringify","console","log","formState","setFormState","newStudentName","handleAddName","event","name","target","value","err","handleFormChange","randomStudent","setRandomStudent","generateRandomName","Math","floor","random","length","handleGenerate","shrink","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n  Chip,\n} from \"@mui/material\";\n\n//Styling\nconst fieldStyle = {\n  backgroundColor: \"white\",\n};\n\n//Declare export here\nconst StudentList = () => {\n  \n  //Initialize student list as an empty array of objects\n  const [studentNames, setStudentNames] = useState([\n    { id: \"\", studentName: \"\" },\n    // { id: \"1\", studentName: \"Leah\" },\n  ]);\n\n  //Set local storage items as student names\n  useEffect(() => {\n    const studentNames = JSON.parse(localStorage.getItem(\"studentNames\"));\n    if (studentNames) {\n      setStudentNames(studentNames);\n    } else {\n      return \"There are no student names yet.\";\n    }\n    localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  }, [studentNames]);\n  console.log(\"Here is the first test of student name array \", studentNames);\n\n  const [formState, setFormState] = useState({\n    newStudentName: \"\",\n  });\n\n  const { newStudentName } = formState;\n\n  //Add entered name to array\n  const handleAddName = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(\"handleFormChange: \" + name, value);\n    try {\n      setStudentNames((studentNames) => [...studentNames, { [name]: value }]);\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n    //Check formState\n    console.log(\"FormState = \" + formState);\n\n    console.log(\"The add name button is working!\");\n\n    // try {\n    //   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  //When user enters a name into the text field, declare this as target for form state\n  const handleFormChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    // handleAddName();\n    // try {\n    //   setFormState((event) => ({\n    //     ...formState,\n    //     newStudentName: event.target.value,\n    //   }));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  console.log(\n    \"Here are the student names by the end of the code: \" + studentNames\n  );\n\n  //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // \"Larry Smith\",\n  // \"Dora Jones\",\n  // \"Ahmed Mohamed\",\n  // \"Tuan Hong\",\n  // \"Sandra Cuervo\",\n  // ];\n\n  //Initialize random student variable\n  const [randomStudent, setRandomStudent] = useState();\n\n  // TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n\n  //TODO: Permutate array .. Make sure each student can only be called on once per iteration\n\n  //Generates a random name from given array\n  const generateRandomName = () => {\n    setRandomStudent(\n      studentNames[Math.floor(Math.random() * studentNames.length)]\n    );\n  };\n  //Calls above function onClick\n  const handleGenerate = () => {\n    generateRandomName();\n    console.log(\"The generate random button is working!\");\n  };\n\n  console.log(\n    \"Here is the random student name variable outside all functions: \" +\n      randomStudent\n  );\n\n  return (\n    <Box>\n      <form onSubmit={handleAddName}>\n        <FormControl>\n          <p>Enter a student's name and click \"ADD NAME TO LIST\".</p>\n          <TextField\n            id=\"student-name-form\"\n            name=\"newStudentName\"\n            variant=\"outlined\"\n            label=\"Write a name\"\n            color=\"primary\"\n            value={newStudentName}\n            onChange={handleFormChange}\n            sx={fieldStyle}\n            InputLabelProps={{ shrink: true }}\n          ></TextField>\n\n          <Button\n            id=\"add-name-button\"\n            variant=\"contained\"\n            sx={{ mt: 4, mb: 2 }}\n            // onClick={() => handleAddName()}\n          >\n            Add name to list\n          </Button>\n          <p>To select a random name, click \"GENERATE A RANDOM NAME\".</p>\n          <Button\n            id=\"generate-button\"\n            variant=\"contained\"\n            onClick={() => handleGenerate()}\n          >\n            Generate a random name\n          </Button>\n          <Chip\n            variant=\"outlined\"\n            label={randomStudent}\n            sx={{ backgroundColor: \"white\", mt: 4, mb: 2 }}\n            // color=\"primary\"\n          />\n        </FormControl>\n      </form>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n            <List id=\"student-name-list\">\n              {studentNames.map((student) => {\n                return <ListItem key={student}>{student} </ListItem>;\n              })}\n            </List>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}