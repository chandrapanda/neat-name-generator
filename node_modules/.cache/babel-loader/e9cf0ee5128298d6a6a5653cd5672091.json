{"ast":null,"code":"var _jsxFileName = \"/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Box, Grid, Typography, List, ListItem, TextField, FormControl, Button, Chip } from \"@mui/material\"; //Styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fieldStyle = {\n  backgroundColor: \"white\"\n}; //Declare export here\n\nconst StudentList = () => {\n  _s();\n\n  //Initialize student list as an empty array of objects\n  // const studentNames = [\n  //   { name: \"Leah\" },\n  //   { name: \"Jose\" },\n  //   { name: \"Liu Xin\" },\n  //   { name: \"Mohammed\" },\n  // ];\n  const [studentNames, setStudentNames] = useState([{\n    id: \"\",\n    studentName: \"\"\n  }, {\n    id: \"1\",\n    studentName: \"Leah\"\n  }]); //Set local storage items as student names\n  // useEffect(() => {\n  //   const studentNames = JSON.parse(localStorage.getItem(\"studentNames\"));\n  //   if (studentNames) {\n  //     setStudentNames(studentNames);\n  //   } else {\n  //     return \"There are no student names yet.\";\n  //   }\n  //   localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  // }, [studentNames]);\n  // console.log(\"Here is the first test of student name array \", studentNames);\n  //Initialize Add Student form variable\n\n  const [formState, setFormState] = useState({\n    newStudentName: \"\"\n  });\n  const {\n    newStudentName\n  } = formState; //When user enters a name into the text field, declare this as target for form state\n\n  const handleFormChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(\"handleFormChange is running\");\n    setFormState({ ...formState,\n      [name]: value\n    }); // handleAddName();\n    // try {\n    //   setFormState((event) => ({\n    //     ...formState,\n    //     newStudentName: event.target.value,\n    //   }));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  }; //Add entered name to array\n\n\n  const handleAddName = async event => {\n    console.log(\"handleAddName is running\");\n    event.preventDefault(); //Check formState\n    // console.log(\"FormState = \" + formState);\n\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(\"handleFormChange: \" + name, value);\n\n    try {\n      setFormState({\n        studentName: \"\"\n      });\n      setStudentNames(studentNames => [...studentNames, {\n        [name]: value\n      }]);\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n\n    console.log(\"The add name button is working!\"); // try {\n    //   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  console.log(\"Here are the student names by the end of the code: \" + studentNames); //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // \"Larry Smith\",\n  // \"Dora Jones\",\n  // \"Ahmed Mohamed\",\n  // \"Tuan Hong\",\n  // \"Sandra Cuervo\",\n  // ];\n  //Initialize random student variable\n\n  const [randomStudent, setRandomStudent] = useState(); // TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n  //TODO: Permutate array .. Make sure each student can only be called on once per iteration\n  //Generates a random name from given array\n\n  const generateRandomName = () => {\n    setRandomStudent(studentNames[Math.floor(Math.random() * studentNames.length)]);\n  }; //Calls above function onClick\n\n\n  const handleGenerate = () => {\n    generateRandomName();\n    console.log(\"The generate random button is working!\");\n  };\n\n  console.log(\"Here is the random student name variable outside all functions: \" + randomStudent);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a student's name and click \\\"ADD NAME TO LIST\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"student-name-form\",\n        name: \"newStudentName\",\n        variant: \"outlined\",\n        label: \"Write a name\",\n        color: \"primary\",\n        value: newStudentName,\n        onChange: handleFormChange,\n        sx: fieldStyle,\n        InputLabelProps: {\n          shrink: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"add-name-button\",\n        variant: \"contained\",\n        sx: {\n          mt: 4,\n          mb: 2\n        },\n        onClick: () => handleAddName(),\n        children: \"Add name to list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To select a random name, click \\\"GENERATE A RANDOM NAME\\\".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"generate-button\",\n        variant: \"contained\",\n        onClick: () => handleGenerate(),\n        children: \"Generate a random name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        variant: \"outlined\",\n        label: randomStudent,\n        sx: {\n          backgroundColor: \"white\",\n          mt: 4,\n          mb: 2\n        } // color=\"primary\"\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 4,\n            mb: 2\n          },\n          variant: \"h6\",\n          component: \"div\",\n          children: /*#__PURE__*/_jsxDEV(List, {\n            id: \"student-name-list\",\n            studentData: studentNames,\n            children: studentNames.map(student => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [student, \" \"]\n              }, student, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StudentList, \"v33fU0P8SAMCunWtl8jNceDbZ1A=\");\n\n_c = StudentList;\nexport default StudentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"names":["React","useState","useEffect","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","Chip","fieldStyle","backgroundColor","StudentList","studentNames","setStudentNames","id","studentName","formState","setFormState","newStudentName","handleFormChange","event","name","value","target","console","log","handleAddName","preventDefault","err","randomStudent","setRandomStudent","generateRandomName","Math","floor","random","length","handleGenerate","shrink","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n  Chip,\n} from \"@mui/material\";\n\n//Styling\nconst fieldStyle = {\n  backgroundColor: \"white\",\n};\n\n//Declare export here\nconst StudentList = () => {\n  //Initialize student list as an empty array of objects\n\n  // const studentNames = [\n  //   { name: \"Leah\" },\n  //   { name: \"Jose\" },\n  //   { name: \"Liu Xin\" },\n  //   { name: \"Mohammed\" },\n  // ];\n\n  const [studentNames, setStudentNames] = useState([\n    { id: \"\", studentName: \"\" },\n    { id: \"1\", studentName: \"Leah\" },\n  ]);\n\n  //Set local storage items as student names\n  // useEffect(() => {\n  //   const studentNames = JSON.parse(localStorage.getItem(\"studentNames\"));\n  //   if (studentNames) {\n  //     setStudentNames(studentNames);\n  //   } else {\n  //     return \"There are no student names yet.\";\n  //   }\n  //   localStorage.setItem(\"studentNames\", JSON.stringify(studentNames));\n  // }, [studentNames]);\n  // console.log(\"Here is the first test of student name array \", studentNames);\n\n  //Initialize Add Student form variable\n  const [formState, setFormState] = useState({\n    newStudentName: \"\",\n  });\n\n  const { newStudentName } = formState;\n\n  //When user enters a name into the text field, declare this as target for form state\n  const handleFormChange = (event) => {\n    const { name, value } = event.target;\n    console.log(\"handleFormChange is running\");\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    // handleAddName();\n    // try {\n    //   setFormState((event) => ({\n    //     ...formState,\n    //     newStudentName: event.target.value,\n    //   }));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  //Add entered name to array\n  const handleAddName = async (event) => {\n    console.log(\"handleAddName is running\");\n    event.preventDefault();\n    //Check formState\n    // console.log(\"FormState = \" + formState);\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(\"handleFormChange: \" + name, value);\n    try {\n      setFormState({\n        studentName: \"\",\n      });\n      setStudentNames((studentNames) => [...studentNames, { [name]: value }]);\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n\n    console.log(\"The add name button is working!\");\n\n    // try {\n    //   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  console.log(\n    \"Here are the student names by the end of the code: \" + studentNames\n  );\n\n  //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // \"Larry Smith\",\n  // \"Dora Jones\",\n  // \"Ahmed Mohamed\",\n  // \"Tuan Hong\",\n  // \"Sandra Cuervo\",\n  // ];\n\n  //Initialize random student variable\n  const [randomStudent, setRandomStudent] = useState();\n\n  // TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n\n  //TODO: Permutate array .. Make sure each student can only be called on once per iteration\n\n  //Generates a random name from given array\n  const generateRandomName = () => {\n    setRandomStudent(\n      studentNames[Math.floor(Math.random() * studentNames.length)]\n    );\n  };\n  //Calls above function onClick\n  const handleGenerate = () => {\n    generateRandomName();\n    console.log(\"The generate random button is working!\");\n  };\n\n  console.log(\n    \"Here is the random student name variable outside all functions: \" +\n      randomStudent\n  );\n\n  return (\n    <Box>\n      <FormControl>\n        <p>Enter a student's name and click \"ADD NAME TO LIST\".</p>\n        <TextField\n          id=\"student-name-form\"\n          name=\"newStudentName\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          value={newStudentName}\n          onChange={handleFormChange}\n          sx={fieldStyle}\n          InputLabelProps={{ shrink: true }}\n        ></TextField>\n\n        <Button\n          id=\"add-name-button\"\n          variant=\"contained\"\n          sx={{ mt: 4, mb: 2 }}\n          onClick={() => handleAddName()}\n        >\n          Add name to list\n        </Button>\n        <p>To select a random name, click \"GENERATE A RANDOM NAME\".</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          onClick={() => handleGenerate()}\n        >\n          Generate a random name\n        </Button>\n        <Chip\n          variant=\"outlined\"\n          label={randomStudent}\n          sx={{ backgroundColor: \"white\", mt: 4, mb: 2 }}\n          // color=\"primary\"\n        />\n      </FormControl>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n            <List id=\"student-name-list\" studentData={studentNames}>\n              {studentNames.map((student) => {\n                return <ListItem key={student}>{student} </ListItem>;\n              })}\n            </List>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}