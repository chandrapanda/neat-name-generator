{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chandraholt/Desktop/Repositories/neat-name-generator/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _toConsumableArray from\"/Users/chandraholt/Desktop/Repositories/neat-name-generator/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/Users/chandraholt/Desktop/Repositories/neat-name-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _defineProperty from\"/Users/chandraholt/Desktop/Repositories/neat-name-generator/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/chandraholt/Desktop/Repositories/neat-name-generator/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/chandraholt/Desktop/Repositories/neat-name-generator/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import*as React from\"react\";import{useState,useEffect}from\"react\";import{Box,Grid,Typography,List,ListItem,TextField,FormControl,Button,Chip}from\"@mui/material\";//Styling\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var fieldStyle={backgroundColor:\"white\"};//Declare export here\nvar StudentList=function StudentList(){//Initialize student list as an empty array of objects\nvar _useState=useState([{studentName:\"\"}]),_useState2=_slicedToArray(_useState,2),studentNames=_useState2[0],setStudentNames=_useState2[1];//Set local storage items as student names\nuseEffect(function(){var studentNames=JSON.parse(localStorage.getItem(\"studentNames\"));if(studentNames){setStudentNames(studentNames);}else{return\"There are no student names yet.\";}localStorage.setItem(studentNames,JSON.stringify(studentNames));},[studentNames]);console.log(\"Here is the first test of student name array \",studentNames);//Initialize Add Student form variable\nvar _useState3=useState({newStudentName:\"\"}),_useState4=_slicedToArray(_useState3,2),formState=_useState4[0],setFormState=_useState4[1];var newStudentName=formState.newStudentName;//When user enters a name into the text field, declare this as target for form state\nvar handleFormChange=function handleFormChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;console.log(\"handleFormChange is running\");setFormState(_objectSpread(_objectSpread({},formState),{},_defineProperty({},name,value)));handleAddName();try{setFormState(function(event){return _objectSpread(_objectSpread({},formState),{},{newStudentName:event.target.value});});}catch(err){console.log(\"Error: \".concat(err));}};//Add entered name to array\nvar handleAddName=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event){var name,value;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"handleAddName is running\");event.preventDefault();//Check formState\nconsole.log(\"FormState = \"+formState);name=event.target.name;value=event.target.value;console.log(\"handleFormChange: \"+name,value);try{setFormState({studentName:\"\"});setStudentNames(function(studentNames){return[].concat(_toConsumableArray(studentNames),[_defineProperty({},name,value)]);});}catch(err){console.log(\"Error: \".concat(err));}console.log(\"The add name button is working!\");// try {\n//   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n// } catch (err) {\n//   console.log(`Error: ${err}`);\n// }\ncase 8:case\"end\":return _context.stop();}}},_callee);}));return function handleAddName(_x){return _ref.apply(this,arguments);};}();console.log(\"Here are the student names by the end of the code: \"+studentNames);//dummy list for student names for testing\n// let studentNames = [\n//   \"Mary Smith\",\n//   \"Joaquim Tochtermann\",\n//   \"Ahmed Mohammed\",\n//   \"Jules Reynolds\",\n//   \"Tuan Hong\",\n//   \"Bob Ray\",\n//   \"Liam Neeson\",\n//   \"Jose Gallo\",\n//   \"Nicole Herman\",\n// \"Larry Smith\",\n// \"Dora Jones\",\n// \"Ahmed Mohamed\",\n// \"Tuan Hong\",\n// \"Sandra Cuervo\",\n// ];\n//Initialize random student variable\nvar _useState5=useState(),_useState6=_slicedToArray(_useState5,2),randomStudent=_useState6[0],setRandomStudent=_useState6[1];// TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n//TODO: Permutate array .. Make sure each student can only be called on once per iteration\n//Generates a random name from given array\nvar generateRandomName=function generateRandomName(){setRandomStudent(studentNames[Math.floor(Math.random()*studentNames.length)]);};//Calls above function onClick\nvar handleGenerate=function handleGenerate(){generateRandomName();console.log(\"The generate random button is working!\");};console.log(\"Here is the random student name variable outside all functions: \"+randomStudent);return/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Enter a student's name and click \\\"ADD NAME TO LIST\\\".\"}),/*#__PURE__*/_jsx(TextField,{id:\"student-name-form\",name:\"newStudentName\",variant:\"outlined\",label:\"Write a name\",color:\"primary\",value:newStudentName,onChange:handleFormChange,sx:fieldStyle,InputLabelProps:{shrink:true}}),/*#__PURE__*/_jsx(Button,{id:\"add-name-button\",variant:\"contained\",type:\"submit\",sx:{mt:4,mb:2},onClick:function onClick(){return handleAddName();},children:\"Add name to list\"}),/*#__PURE__*/_jsx(\"p\",{children:\"To select a random name, click \\\"GENERATE A RANDOM NAME\\\".\"}),/*#__PURE__*/_jsx(Button,{id:\"generate-button\",variant:\"contained\",type:\"submit\",onClick:function onClick(){return handleGenerate();},children:\"Generate a random name\"}),/*#__PURE__*/_jsx(Chip,{variant:\"outlined\",label:randomStudent,sx:{backgroundColor:\"white\",mt:4,mb:2}// color=\"primary\"\n})]}),/*#__PURE__*/_jsx(Grid,{container:true,spacing:2,children:/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsx(Typography,{sx:{mt:4,mb:2},variant:\"h6\",component:\"div\",children:/*#__PURE__*/_jsx(List,{id:\"student-name-list\",studentData:studentNames,children:studentNames.map(function(student){return/*#__PURE__*/_jsxs(ListItem,{children:[student,\" \"]},student);})})})})})]});};export default StudentList;","map":{"version":3,"names":["React","useState","useEffect","Box","Grid","Typography","List","ListItem","TextField","FormControl","Button","Chip","fieldStyle","backgroundColor","StudentList","studentName","studentNames","setStudentNames","JSON","parse","localStorage","getItem","setItem","stringify","console","log","newStudentName","formState","setFormState","handleFormChange","event","target","name","value","handleAddName","err","preventDefault","randomStudent","setRandomStudent","generateRandomName","Math","floor","random","length","handleGenerate","shrink","mt","mb","map","student"],"sources":["/Users/chandraholt/Desktop/Repositories/neat-name-generator/src/components/StudentList/index.js"],"sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  List,\n  ListItem,\n  TextField,\n  FormControl,\n  Button,\n  Chip,\n} from \"@mui/material\";\n\n//Styling\nconst fieldStyle = {\n  backgroundColor: \"white\",\n};\n\n//Declare export here\nconst StudentList = () => {\n  //Initialize student list as an empty array of objects\n  const [studentNames, setStudentNames] = useState([{ studentName: \"\" }]);\n\n  //Set local storage items as student names\n  useEffect(() => {\n    const studentNames = JSON.parse(localStorage.getItem(\"studentNames\"));\n    if (studentNames) {\n      setStudentNames(studentNames);\n    } else {\n      return \"There are no student names yet.\";\n    }\n    localStorage.setItem(studentNames, JSON.stringify(studentNames));\n  }, [studentNames]);\n  console.log(\"Here is the first test of student name array \", studentNames);\n\n  //Initialize Add Student form variable\n  const [formState, setFormState] = useState({\n    newStudentName: \"\",\n  });\n\n  const { newStudentName } = formState;\n\n  //When user enters a name into the text field, declare this as target for form state\n  const handleFormChange = (event) => {\n    const { name, value } = event.target;\n    console.log(\"handleFormChange is running\");\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    handleAddName();\n    try {\n      setFormState((event) => ({\n        ...formState,\n        newStudentName: event.target.value,\n      }));\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n  };\n\n  //Add entered name to array\n  const handleAddName = async (event) => {\n    console.log(\"handleAddName is running\");\n    event.preventDefault();\n    //Check formState\n    console.log(\"FormState = \" + formState);\n    const name = event.target.name;\n    const value = event.target.value;\n    console.log(\"handleFormChange: \" + name, value);\n    try {\n      setFormState({\n        studentName: \"\",\n      });\n      setStudentNames((studentNames) => [...studentNames, { [name]: value }]);\n    } catch (err) {\n      console.log(`Error: ${err}`);\n    }\n\n    console.log(\"The add name button is working!\");\n\n    // try {\n    //   setStudentNames((studentNames) => studentNames.concat(newStudentName));\n    // } catch (err) {\n    //   console.log(`Error: ${err}`);\n    // }\n  };\n\n  console.log(\n    \"Here are the student names by the end of the code: \" + studentNames\n  );\n\n  //dummy list for student names for testing\n  // let studentNames = [\n  //   \"Mary Smith\",\n  //   \"Joaquim Tochtermann\",\n  //   \"Ahmed Mohammed\",\n  //   \"Jules Reynolds\",\n  //   \"Tuan Hong\",\n  //   \"Bob Ray\",\n  //   \"Liam Neeson\",\n  //   \"Jose Gallo\",\n  //   \"Nicole Herman\",\n  // \"Larry Smith\",\n  // \"Dora Jones\",\n  // \"Ahmed Mohamed\",\n  // \"Tuan Hong\",\n  // \"Sandra Cuervo\",\n  // ];\n\n  //Initialize random student variable\n  const [randomStudent, setRandomStudent] = useState();\n\n  // TODO: Create function to map over student names after seeds are ready (?? DO I WANT A BACKEND SERVER??)\n\n  //TODO: Permutate array .. Make sure each student can only be called on once per iteration\n\n  //Generates a random name from given array\n  const generateRandomName = () => {\n    setRandomStudent(\n      studentNames[Math.floor(Math.random() * studentNames.length)]\n    );\n  };\n  //Calls above function onClick\n  const handleGenerate = () => {\n    generateRandomName();\n    console.log(\"The generate random button is working!\");\n  };\n\n  console.log(\n    \"Here is the random student name variable outside all functions: \" +\n      randomStudent\n  );\n\n  return (\n    <Box>\n      <FormControl>\n        <p>Enter a student's name and click \"ADD NAME TO LIST\".</p>\n        <TextField\n          id=\"student-name-form\"\n          name=\"newStudentName\"\n          variant=\"outlined\"\n          label=\"Write a name\"\n          color=\"primary\"\n          value={newStudentName}\n          onChange={handleFormChange}\n          sx={fieldStyle}\n          InputLabelProps={{ shrink: true }}\n        ></TextField>\n\n        <Button\n          id=\"add-name-button\"\n          variant=\"contained\"\n          type=\"submit\"\n          sx={{ mt: 4, mb: 2 }}\n          onClick={() => handleAddName()}\n        >\n          Add name to list\n        </Button>\n        <p>To select a random name, click \"GENERATE A RANDOM NAME\".</p>\n        <Button\n          id=\"generate-button\"\n          variant=\"contained\"\n          type=\"submit\"\n          onClick={() => handleGenerate()}\n        >\n          Generate a random name\n        </Button>\n        <Chip\n          variant=\"outlined\"\n          label={randomStudent}\n          sx={{ backgroundColor: \"white\", mt: 4, mb: 2 }}\n          // color=\"primary\"\n        />\n      </FormControl>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n            <List id=\"student-name-list\" studentData={studentNames}>\n              {studentNames.map((student) => {\n                return <ListItem key={student}>{student} </ListItem>;\n              })}\n            </List>\n          </Typography>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\nexport default StudentList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}